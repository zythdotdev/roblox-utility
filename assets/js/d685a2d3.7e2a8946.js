"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[311],{82837:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `NetworkEvent` object. The \'unreliable\' parameter is defined by the server and ignored by the client","params":[{"name":"name","desc":"The name of the `NetworkEvent` instance which must match on the client and server","lua_type":"string"},{"name":"parent","desc":"The parent of the `NetworkEvent` instance which must match on the client and server","lua_type":"Instance"},{"name":"unreliable","desc":"Whether or not the event should be unreliable. Defaults to `false`","lua_type":"boolean?"}],"returns":[{"desc":"The `NetworkEvent` object","lua_type":"NetworkEvent"}],"function_type":"static","tags":["Static"],"source":{"line":110,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"destroy","desc":"Deconstructs the `NetworkEvent` object","params":[{"name":"self","desc":"","lua_type":"NetworkEvent"}],"returns":[],"function_type":"static","source":{"line":137,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"connect","desc":"Connects a callback to the `NetworkEvent` which is invoked when the event is fired\\n\\n:::note\\nWhen connecting on the server, the first argument passed to the callback is always the player that fired the event\\n:::\\n\\n```lua\\n-- Client\\nclientEvent:connect(function(...)\\n\\tprint(\\"The event fired and passed the values:\\", ...)\\nend)\\n\\n-- Server\\nserverEvent:connect(function(player, ...)\\n\\tprint(\\"The event was fired by \\" .. player .. \\" and passed the values:\\", ...)\\nend)\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkEvent"},{"name":"callback","desc":"The callback to be invoked when the event is fired","lua_type":"(...any) -> ()"}],"returns":[{"desc":"An event connection that can be disconnected","lua_type":"EventConnection"}],"function_type":"static","source":{"line":184,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"fireServer","desc":"Fires the `NetworkEvent` on the client, passing the given arguments to the server\\n\\n```lua\\nevent:fireServer(\\"Hello, server!\\")\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkEvent"},{"name":"...","desc":"The arguments to pass to the server","lua_type":"any"}],"returns":[],"function_type":"static","realm":["Client"],"source":{"line":210,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"fireClient","desc":"Fires the `NetworkEvent` on the server, passing the given arguments to the players client\\n\\n```lua\\nevent:fireClient(player, \\"Hello, client!\\")\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkEvent"},{"name":"player","desc":"The player to fire the event to","lua_type":"Player"},{"name":"...","desc":"The arguments to pass to the client","lua_type":"any"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":233,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"fireFilteredClients","desc":"Fires the `NetworkEvent` on the server, passing the given arguments to player clients that pass the given predicate check\\n\\n```lua\\nevent:fireFilteredClients(function(player)\\n\\treturn player.Team == game.Teams.Heroes\\nend, \\"You win!\\")\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkEvent"},{"name":"predicate","desc":"The predicate to check against each player","lua_type":"(player: Player) -> boolean"},{"name":"...","desc":"The arguments to pass to the client","lua_type":"any"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":260,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"fireAllClients","desc":"Fires the `NetworkEvent` on the server, passing the given arguments to all clients\\n\\n```lua\\nevent:fireAllClients(1, 2, 3)\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkEvent"},{"name":"...","desc":"The arguments to pass to the clients","lua_type":"any"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":288,"path":"src/Modules/Connection/NetworkEvent.lua"}}],"properties":[{"name":"className","desc":"Static property that defines the class name `NetworkEvent`","lua_type":"string","tags":["Static"],"source":{"line":59,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"remoteEventDestroyed","desc":"An event that fires when the underlying Roblox `RemoteEvent` instance is destroyed","lua_type":"Event","source":{"line":66,"path":"src/Modules/Connection/NetworkEvent.lua"}}],"types":[{"name":"Self","desc":"","lua_type":"NetworkEvent","source":{"line":33,"path":"src/Modules/Connection/NetworkEvent.lua"}},{"name":"EventConnection","desc":"An interface that respresents a connection to an event. An object which conforms to this interface is returned by the `NetworkEvent:connect` method, this\\n`EventConnection` object can be used to disconnect the callback from the event\\n\\n```lua\\nprint(connection.connected) -- true\\nconnection:disconnect()\\nprint(connection.connected) -- false\\n```","fields":[{"name":"connected","lua_type":"boolean","desc":""},{"name":"disconnect","lua_type":"() -> ()","desc":""}],"source":{"line":50,"path":"src/Modules/Connection/NetworkEvent.lua"}}],"name":"NetworkEvent","desc":"An object that wraps Roblox\'s remote events. It can be used to fire events between the server and client\\nwithout having to manage remote event instance lifecycles manually \u2013 initialization and deinitialization are handled for you\\n\\n:::note\\nNetwork events are intended to be paired. A `NetworkEvent` object should be initialized on the server first and then on the client,\\notherwise, an error will occur. The server `NetworkEvent` object will destroy the underlying Roblox `RemoteEvent` instance when it is destroyed.\\nAttempting to call a method on a `NetworkEvent` after its server-side counterpart has been destroyed will result in an error. This can be monitored\\nvia the `NetworkEvent.remoteEventDestroyed` event\\n\\nAny type of Roblox object such as an `Enum`, `Instance`, or others can be passed as a parameter when a `NetworkEvent` is fired,\\nas well as Luau types such as `number`, `string`, and `boolean`. `NetworkEvent` shares its limitations with Roblox\'s `RemoteEvent` class\\n:::\\n\\n```lua\\n-- Server\\nlocal serverEvent = NetworkEvent.new(\\"MyNetworkEvent\\", ReplicatedStorage)\\n\\n-- Client\\nlocal clientEvent = NetworkEvent.new(\\"MyNetworkEvent\\", ReplicatedStorage)\\nclientEvent:connect(function(...)\\n\\tprint(\\"The event fired and passed the values:\\", ...) -- 1, 2, 3\\nend)\\n\\n-- Server\\nserverEvent:fireClient(player, 1, 2, 3)\\n```","source":{"line":97,"path":"src/Modules/Connection/NetworkEvent.lua"}}')}}]);