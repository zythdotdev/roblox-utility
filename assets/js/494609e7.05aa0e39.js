"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[993],{48809:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `Value` object","params":[{"name":"value","desc":"","lua_type":"T?"}],"returns":[{"desc":"The `Value` object","lua_type":"Value"}],"function_type":"static","tags":["Static"],"source":{"line":72,"path":"src/Modules/Value/init.lua"}},{"name":"destroy","desc":"Deconstructs the `Value` object","params":[{"name":"self","desc":"","lua_type":"Value<T?>"}],"returns":[],"function_type":"static","source":{"line":84,"path":"src/Modules/Value/init.lua"}},{"name":"observe","desc":"Connects a callback to the Value which is invoked once upon connection and then whenever the value is changed\\n\\n```lua\\nlocal value = Value.new(1)\\nvalue:observe(function(value: number?)\\n\\tprint(\\"The value is: \\", value)\\nend)\\n```","params":[{"name":"self","desc":"","lua_type":"Value<T?>"},{"name":"callback","desc":"The callback to be invoked when the value is changed","lua_type":"(T?) -> ()"}],"returns":[{"desc":"An event connection that can be disconnected","lua_type":"EventConnection"}],"function_type":"static","source":{"line":103,"path":"src/Modules/Value/init.lua"}},{"name":"set","desc":"Sets the new value and updates any observers\\n\\n```lua\\nlocal value = Value.new(1)\\nvalue:set(2)\\n```","params":[{"name":"self","desc":"","lua_type":"Value<T?>"},{"name":"value","desc":"The new value","lua_type":"T?"}],"returns":[],"function_type":"static","source":{"line":123,"path":"src/Modules/Value/init.lua"}},{"name":"get","desc":"Returns the current value\\n\\n```lua\\nlocal value = Value.new(1)\\nprint(value:get()) -- 1\\n```","params":[{"name":"self","desc":"","lua_type":"Value<T?>"}],"returns":[{"desc":"The current value","lua_type":"T?"}],"function_type":"static","source":{"line":138,"path":"src/Modules/Value/init.lua"}}],"properties":[{"name":"className","desc":"Static property that defines the class name of the `Value` object","lua_type":"string","tags":["Static"],"source":{"line":46,"path":"src/Modules/Value/init.lua"}}],"types":[{"name":"EventConnection","desc":"An interface that respresents a connection to a Value. An object which conforms to this interface is returned by the `Value:observe` method.\\nThis `EventConnection` object can be used to disconnect the callback from the Value\\n\\n```lua\\nprint(connection.connected) -- true\\nconnection:disconnect()\\nprint(connection.connected) -- false\\n```","fields":[{"name":"connected","lua_type":"boolean","desc":""},{"name":"disconnect","lua_type":"() -> ()","desc":""}],"source":{"line":31,"path":"src/Modules/Value/init.lua"}},{"name":"Self","desc":"","lua_type":"Value","source":{"line":37,"path":"src/Modules/Value/init.lua"}}],"name":"Value","desc":"A value implementation that can be observed by multiple observers\\n\\n```lua\\nlocal value = Value.new(1)\\nlocal connection = Value:observe(function(value)\\n\\tprint(\\"The value is: \\", value)\\nend)\\nvalue:set(2)\\nconnection:disconnect()\\nvalue:destroy()\\n```","source":{"line":62,"path":"src/Modules/Value/init.lua"}}')}}]);