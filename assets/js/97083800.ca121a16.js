"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[330],{43800:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `NetworkRequest` object","params":[{"name":"name","desc":"The name of the `NetworkRequest` instance which must match on the client and server","lua_type":"string"},{"name":"parent","desc":"The parent of the `NetworkRequest` instance which must match on the client and server","lua_type":"Instance"},{"name":"callback","desc":"An optional callback to be called when the request is invoked","lua_type":"(player: Player, ...any) -> (...any)?"}],"returns":[{"desc":"The `NetworkRequest` object","lua_type":"NetworkRequest"}],"function_type":"static","tags":["Static"],"source":{"line":111,"path":"src/Modules/Connection/NetworkRequest.lua"}},{"name":"destroy","desc":"Deconstructs the `NetworkRequest` object","params":[{"name":"self","desc":"","lua_type":"NetworkRequest"}],"returns":[],"function_type":"static","source":{"line":137,"path":"src/Modules/Connection/NetworkRequest.lua"}},{"name":"setCallback","desc":"Sets the callback for the `NetworkRequest` which is called when the request is invoked. The callback can be set to nil to remove it\\n\\n```lua\\nlocal serverRequest = NetworkRequest.new(\\"MyNetworkRequest\\", ReplicatedStorage)\\nserverRequest:setCallback(function(player, value)\\n\\tprint(\\"The client passed the value:\\", value)\\n\\treturn \\"Thank you, Client!\\"\\nend\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkRequest"},{"name":"callback","desc":"The callback to be called when the request is invoked","lua_type":"(player: Player, ...any) -> (...any)?"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":168,"path":"src/Modules/Connection/NetworkRequest.lua"}},{"name":"invokeAsync","desc":"Invokes the `NetworkRequest` with the given arguments and yields the thread until a response is returned from the server\\n\\n```lua\\nlocal clientRequest = NetworkRequest.new(\\"MyNetworkRequest\\", ReplicatedStorage)\\nlocal value = clientRequest:invokeAsync(\\"Hello\\")\\nprint(\\"The server responded with:\\", value)\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkRequest"},{"name":"...","desc":"The arguments to pass to the server","lua_type":"any"}],"returns":[{"desc":"The response from the server","lua_type":"... any"}],"function_type":"static","realm":["Client"],"yields":true,"source":{"line":197,"path":"src/Modules/Connection/NetworkRequest.lua"}}],"properties":[{"name":"className","desc":"Static property that defines the class name `NetworkRequest`","lua_type":"string","tags":["Static"],"source":{"line":60,"path":"src/Modules/Connection/NetworkRequest.lua"}},{"name":"remoteFunctionDestroyed","desc":"An event that fires when the underlying Roblox `RemoteFunction` instance is destroyed","lua_type":"Event","source":{"line":67,"path":"src/Modules/Connection/NetworkRequest.lua"}}],"types":[{"name":"Self","desc":"","lua_type":"NetworkRequest","source":{"line":26,"path":"src/Modules/Connection/NetworkRequest.lua"}}],"name":"NetworkRequest","desc":"An object that wraps Roblox\'s remote function. It can be used to request data from the server and receive a response on the client\\nwithout having to manage remote function instance lifecycles manually \u2013 initialization and deinitialization are handled for you\\n\\n:::note\\nNetwork requests are intended to be paired. A `NetworkRequest` object should be initialized on the server first and then on the client,\\notherwise, an error will occur. The server `NetworkRequest` object will destroy the underlying Roblox `RemoteFunction` instance when it is\\ndestroyed. Attempting to call a method on a `NetworkRequest` after its server-side counterpart has been destroyed will result in an error. This\\ncan be monitored via the `NetworkRequest.remoteFunctionDestroyed` event\\n\\nAny type of Roblox object such as an `Enum`, `Instance`, or others can be passed as a parameter when a `NetworkRequest` is fired,\\nas well as Luau types such as `number`, `string`, and `boolean`. `NetworkRequest` shares its limitations with Roblox\'s `RemoteFunction` class\\n:::\\n\\n```lua\\n-- Server\\nlocal serverRequest = NetworkRequest.new(\\"MyNetworkRequest\\", ReplicatedStorage)\\nserverRequest:connect(function(player, _)\\n\\tprint(\\"The client is requesting a response\\")\\n\\treturn \\"Hello, Client!\\"\\nend\\n\\n-- Client\\nlocal clientRequest = NetworkRequest.new(\\"MyNetworkRequest\\", ReplicatedStorage)\\nlocal value = clientRequest:invoke()\\nprint(\\"The server responded with:\\", value) -- Hello, Client!\\n```","source":{"line":98,"path":"src/Modules/Connection/NetworkRequest.lua"}}')}}]);