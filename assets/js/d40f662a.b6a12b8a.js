"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[171],{79144:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new `NetworkValue` object. The value and player parameters are ignored on the client. If a value is given for a specific player,\\nthe same value will be set to nil for all other players","params":[{"name":"name","desc":"The name of the `NetworkValue` instance which must match on the client and server","lua_type":"string"},{"name":"parent","desc":"The parent of the `NetworkValue` instance","lua_type":"Instance"},{"name":"value","desc":"An optional initial value of the `NetworkValue` instance","lua_type":"any?"},{"name":"player","desc":"An optional player to set the value for","lua_type":"Player?"}],"returns":[{"desc":"The `NetworkValue` object","lua_type":"NetworkValue"}],"function_type":"static","tags":["Static"],"source":{"line":117,"path":"src/Modules/Connection/NetworkValue.lua"}},{"name":"destroy","desc":"Deconstructs the `NetworkValue` object","params":[{"name":"self","desc":"","lua_type":"NetworkValue"}],"returns":[],"function_type":"static","source":{"line":148,"path":"src/Modules/Connection/NetworkValue.lua"}},{"name":"connect","desc":"Connects a callback that\'s invoked when the `NetworkValue` object\'s value changes. If the `NetworkValue` object is on the server and\\na player is specified, then that value has been set specifically for that player, otherwise, the shared value was set\\n\\n```lua\\nlocal healthValue = NetworkValue.new(\\"PlayerHealth\\", ReplicatedStorage, 100)\\n\\nlocal connection = healthValue:connect(function(value, player)\\n\\tprint(\\"The players health changed to:\\", value)\\nend)\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkValue"},{"name":"callback","desc":"The callback to be invoked when the `NetworkValue` object\'s value changes","lua_type":"(value: any?, player: Player?) -> ()"}],"returns":[{"desc":"An event connection that can be disconnected","lua_type":"EventConnection"}],"function_type":"static","source":{"line":189,"path":"src/Modules/Connection/NetworkValue.lua"}},{"name":"getValue","desc":"Returns the value of the `NetworkValue` object. If called on the server and a player is specified the value for that specific player is returned\\n\\n:::note\\nThe player parameter is ignored on the client and the value returned is always the value of the `NetworkValue` object on the server,\\nwether that is the shared value or the value set specifically for the local player\\n:::\\n\\n```lua\\n-- Server\\nserverValue:setValue(80)\\nserverValue:setValue(50, player1)\\n\\nserverValue:getValue() -- 80\\nserverValue:getValue(player1) -- 50\\n\\n-- Player1 Client\\nclientValue:getValue() -- 50\\n\\n-- Other Client(s)\\nclientValue:getValue() -- 80\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkValue"},{"name":"player","desc":"An optional player to get the value for","lua_type":"Player?"}],"returns":[{"desc":"The value of the `NetworkValue` object","lua_type":"any?"}],"function_type":"static","source":{"line":225,"path":"src/Modules/Connection/NetworkValue.lua"}},{"name":"setValue","desc":"Sets the value of the `NetworkValue` object. If a player is specified, the value for that specific player is set, otherwise, a shared value\\nis set for all clients\\n\\n:::note\\nSetting a players value to nil will remove the value for that player and they will receive the shared value\\n:::\\n\\n```lua\\nlocal healthValue = NetworkValue.new(\\"PlayerHealth\\", workspace, 100)\\n\\nhealthValue:setValue(80)\\nhealthValue:setValue(50, player1)\\n```","params":[{"name":"self","desc":"","lua_type":"NetworkValue"},{"name":"value","desc":"The value to set","lua_type":"any?"},{"name":"player","desc":"An optional player to set the value for","lua_type":"Player?"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":265,"path":"src/Modules/Connection/NetworkValue.lua"}}],"properties":[{"name":"className","desc":"Static property that defines the class name `NetworkValue`","lua_type":"string","tags":["Static"],"source":{"line":65,"path":"src/Modules/Connection/NetworkValue.lua"}},{"name":"remoteEventDestroyed","desc":"An event that fires when the underlying Roblox `RemoteEvent` instance is destroyed","lua_type":"Event","source":{"line":72,"path":"src/Modules/Connection/NetworkValue.lua"}}],"types":[{"name":"Self","desc":"","lua_type":"NetworkValue","source":{"line":31,"path":"src/Modules/Connection/NetworkValue.lua"}},{"name":"Event","desc":"An interface that respresents an event that can be connected to","fields":[{"name":"connect","lua_type":"(self: Event, callback: (...any) -> ()) -> EventConnection","desc":""}],"source":{"line":40,"path":"src/Modules/Connection/NetworkValue.lua"}},{"name":"EventConnection","desc":"An interface that respresents a connection to an event. This `EventConnection` object can be used to disconnect a callback\\n\\n```lua\\nprint(connection.connected) -- true\\nconnection:disconnect()\\nprint(connection.connected) -- false\\n```","fields":[{"name":"connected","lua_type":"boolean","desc":""},{"name":"disconnect","lua_type":"(self: EventConnection) -> ()","desc":""}],"source":{"line":56,"path":"src/Modules/Connection/NetworkValue.lua"}}],"name":"NetworkValue","desc":"An object that wraps Roblox\'s remote event and synchronizes values between the server and client. Values can be set by the server and are automatically\\nupdated on the client. Values can be set for everybody or for a specific player\\n\\n:::note\\nNetwork requests are intended to be paired. A `NetworkValue` object should be initialized on the server first and then on the client,\\notherwise, an error will occur. The server `NetworkValue` object will destroy the underlying Roblox `RemoteEvent` instance when it is\\ndestroyed. Attempting to call a method on a `NetworkValue` after its server-side counterpart has been destroyed will result in an\\nerror. This can be monitored via the `NetworkValue.remoteEventDestroyed` event\\n\\nAny type of Roblox object such as an `Enum`, `Instance`, or others can be passed as a parameter when a `NetworkValue` is fired,\\nas well as Luau types such as `number`, `string`, and `boolean`. `NetworkValue` shares its limitations with Roblox\'s `RemoteEvent` class\\n:::\\n\\n```lua\\n-- Server\\nlocal serverValue = NetworkValue.new(\\"PlayerHealth\\", workspace, 100)\\n\\n-- Client\\nlocal clientValue = NetworkValue.new(\\"PlayerHealth\\", workspace)\\n\\nprint(\\"The players health is:\\", clientValue:getValue()) -- 100\\nclientValue.changed:connect(function(value)\\n\\tprint(\\"The players health changed to:\\", value)\\nend)\\n```","source":{"line":102,"path":"src/Modules/Connection/NetworkValue.lua"}}')}}]);