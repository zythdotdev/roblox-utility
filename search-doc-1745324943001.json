[{"title":"Roblox Utility","type":0,"sectionRef":"#","url":"/roblox-utility/docs/intro","content":"Roblox Utility A collection of utility modules that can be used to enhance your Roblox game development experience. Installation To install the packages in this repository you can use the Wally package manager. After installing Wally, navigate to your project directory and run wally init – this will generate the wally.toml file. You can add the roblox-utility modules to the generated wally.toml file as dependencies. After adding the modules to your dependecy list, run wally install. Wally will subsequently generate a Packages folder in your project directory which will contain the installed dependencies.","keywords":""},{"title":"NetworkRequest","type":0,"sectionRef":"#","url":"/roblox-utility/api/NetworkRequest","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#types","content":" "},{"title":"Self​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#Self","content":"&lt;/&gt; type Self = NetworkRequest  "},{"title":"Properties​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#properties","content":" "},{"title":"className​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#className","content":"Static &lt;/&gt; NetworkRequest.className: string Static property that defines the class name NetworkRequest  "},{"title":"remoteFunctionDestroyed​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#remoteFunctionDestroyed","content":"&lt;/&gt; NetworkRequest.remoteFunctionDestroyed: Event An event that fires when the underlying Roblox RemoteFunction instance is destroyed "},{"title":"Functions​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#functions","content":" "},{"title":"new​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#new","content":"Static &lt;/&gt; NetworkRequest.new( name: string,-- The name of the NetworkRequest instance which must match on the client and server parent: Instance,-- The parent of the NetworkRequest instance which must match on the client and server callback: ( player: Player , ...any ) → (...any)?-- An optional callback to be called when the request is invoked ) → NetworkRequest-- The NetworkRequest object Constructs a new NetworkRequest object  "},{"title":"destroy​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#destroy","content":"&lt;/&gt; NetworkRequest.destroy(self: NetworkRequest) → () Deconstructs the NetworkRequest object  "},{"title":"setCallback​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#setCallback","content":"This item only works when running on the server. Server &lt;/&gt; NetworkRequest.setCallback( self: NetworkRequest, callback: ( player: Player , ...any ) → (...any)?-- The callback to be called when the request is invoked ) → () Sets the callback for the NetworkRequest which is called when the request is invoked. The callback can be set to nil to remove it local serverRequest = NetworkRequest.new(&quot;MyNetworkRequest&quot;, ReplicatedStorage) serverRequest:setCallback(function(player, value) print(&quot;The client passed the value:&quot;, value) return &quot;Thank you, Client!&quot; end   "},{"title":"invokeAsync​","type":1,"pageTitle":"NetworkRequest","url":"/roblox-utility/api/NetworkRequest#invokeAsync","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; NetworkRequest.invokeAsync( self: NetworkRequest, ...: any-- The arguments to pass to the server ) → ...any-- The response from the server Invokes the NetworkRequest with the given arguments and yields the thread until a response is returned from the server local clientRequest = NetworkRequest.new(&quot;MyNetworkRequest&quot;, ReplicatedStorage) local value = clientRequest:invokeAsync(&quot;Hello&quot;) print(&quot;The server responded with:&quot;, value)  "},{"title":"Connection","type":0,"sectionRef":"#","url":"/roblox-utility/api/Connection","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Connection","url":"/roblox-utility/api/Connection#types","content":" "},{"title":"EventConnection​","type":1,"pageTitle":"Connection","url":"/roblox-utility/api/Connection#EventConnection","content":"&lt;/&gt; interface EventConnection { connected: boolean disconnect: () → () } An interface that respresents a connection to an event. This EventConnection object can be used to disconnect a callback print(connection.connected) -- true connection:disconnect() print(connection.connected) -- false   "},{"title":"NetworkEvent​","type":1,"pageTitle":"Connection","url":"/roblox-utility/api/Connection#NetworkEvent","content":"&lt;/&gt; type NetworkEvent = NetworkEvent   "},{"title":"NetworkRequest​","type":1,"pageTitle":"Connection","url":"/roblox-utility/api/Connection#NetworkRequest","content":"&lt;/&gt; type NetworkRequest = NetworkRequest   "},{"title":"NetworkValue​","type":1,"pageTitle":"Connection","url":"/roblox-utility/api/Connection#NetworkValue","content":"&lt;/&gt; type NetworkValue = NetworkValue  "},{"title":"EventConnection","type":0,"sectionRef":"#","url":"/roblox-utility/api/EventConnection","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#types","content":" "},{"title":"Self​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#Self","content":"&lt;/&gt; type Self = EventConnection  "},{"title":"Properties​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#properties","content":" "},{"title":"className​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#className","content":"Static &lt;/&gt; EventConnection.className: string Static property that defines the class name of the EventConnection object  "},{"title":"connected​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#connected","content":"&lt;/&gt; EventConnection.connected: boolean Whether or not the EventConnection object is connected to the event "},{"title":"Functions​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#functions","content":" "},{"title":"new​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#new","content":"Static &lt;/&gt; EventConnection.new( event: Event-- The event to connect to ) → EventConnection-- The EventConnection object Constructs a new EventConnection object caution Do not construct this object manually. Use Event:connect instead  "},{"title":"destroy​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#destroy","content":"&lt;/&gt; EventConnection.destroy(self: EventConnection) → () Deconstructs the EventConnection object  "},{"title":"disconnect​","type":1,"pageTitle":"EventConnection","url":"/roblox-utility/api/EventConnection#disconnect","content":"&lt;/&gt; EventConnection.disconnect(self: EventConnection) → () Disconnects the EventConnection object from the event and deconstructs it "},{"title":"Bag","type":0,"sectionRef":"#","url":"/roblox-utility/api/Bag","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#types","content":" "},{"title":"Self​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#Self","content":"&lt;/&gt; type Self = Bag   "},{"title":"Instance​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#Instance","content":"&lt;/&gt; type Instance = Instance An item that can be added to the Bag "},{"title":"Properties​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#properties","content":" "},{"title":"className​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#className","content":"Static &lt;/&gt; Bag.className: string Static property that defines the class name Bag "},{"title":"Functions​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#new","content":"&lt;/&gt; Bag.new() → Bag-- The Bag object Constructs a new Bag object  "},{"title":"destroy​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#destroy","content":"&lt;/&gt; Bag.destroy(self: Bag) → () Deconstructs the Bag object  "},{"title":"add​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#add","content":"&lt;/&gt; Bag.add( self: Bag, item: Item,-- Item to retain a reference to disposeMethod: string?-- An optional dispose method name to invoke on the item when the bags disposed or destroyed ) → itemItem-- The item that was passed in Adds an Item reference to the Bag. When the bags contents are disposed of or the bag is destroyed the item's dispose method will be invoked and the reference to the item will be removed from the bag. Type Dispose Method Instance object:Destroy() RBXScriptConnection object:Disconnect() function object() thread task.cancel(object) table object:Destroy() or object:Disconnect() or object:destroy() or object:disconnect() table with disposeMethod object:disposeMethod() caution An error will be thrown if a dispose method cannot be found for the object type that was added to the Bag -- Adding a function to the `Bag` and then disposing of the bags contents will invoke the function Bag:add(function() print(&quot;Disposed!&quot;) end) Bag:dispose() -- Adding a table to the `Bag` and then disposing of the bags contents will invoke the tables `destroy`, 'disconnect' or their PascalCased counterpart methods if they exist local class = { destroy = function(self) print(&quot;Disposed!&quot;) end } Bag:add(class) Bag:dispose() -- Adding a Roblox `Instance` to the `Bag` and then disposing of the bags contents will also destroy the `Instance` local part = Instance.new(&quot;Part&quot;) Bag:add(part) Bag:dispose() -- You can define a custom dispose method on a table and pass it in as the second argument. This will be invoked when the bags contents are disposed of local class = { customDisposeMethod = function(self) print(&quot;Disposed!&quot;) end } Bag:add(class, &quot;customDisposeMethod&quot;) Bag:dispose()   "},{"title":"remove​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#remove","content":"&lt;/&gt; Bag.remove( self: Bag, item: Item-- Item to remove from the bag ) → boolean-- Whether or not the item was removed Removes the item reference from the Bag and invokes its dispose method. If the item was found and removed, true is returned, otherwise false is returned local func = Bag:add(function() print(&quot;Disposed!&quot;) end) Bag:remove(func) -- &quot;Disposed!&quot; will be printed   "},{"title":"dispose​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#dispose","content":"&lt;/&gt; Bag.dispose(self: Bag) → () Disposes of all item references in the Bag. This is the same as invoking remove on each object added to the Bag. The ordering in which the objects are disposed of isn't guaranteed to match the order in which they were added local part = Instance.new(&quot;Part&quot;) local connection = part.Touched:Connect(function() print(&quot;Touched!&quot;) end) Bag:add(part) Bag:add(connection) Bag:dispose() -- 'part' is destroyed and 'connection' is disconnected   "},{"title":"attach​","type":1,"pageTitle":"Bag","url":"/roblox-utility/api/Bag#attach","content":"&lt;/&gt; Bag.attach( self: Bag, instance: Instance ) → () Attaches the Bag object to a Roblox Instance. Invoking this method will detach the Bag from any previously attached Instance. When the attached instance is removed from the game (its parent or ancestor's parent is set to nil), the Bag will automatically destroy itself. It's important that any references to the bag are still released when it's no longer being used caution An error will be thrown if instance is not a descendant of the game's DataModel "},{"title":"Event","type":0,"sectionRef":"#","url":"/roblox-utility/api/Event","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#types","content":" "},{"title":"EventConnection​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#EventConnection","content":"&lt;/&gt; interface EventConnection { connected: boolean disconnect: () → () } An interface that respresents a connection to an event. An object which conforms to this interface is returned by the Event:connect method. This EventConnection object can be used to disconnect the callback from the event print(connection.connected) -- true connection:disconnect() print(connection.connected) -- false   "},{"title":"Self​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#Self","content":"&lt;/&gt; type Self = Event  "},{"title":"Properties​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#properties","content":" "},{"title":"className​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#className","content":"Static &lt;/&gt; Event.className: string Static property that defines the class name of the Event object "},{"title":"Functions​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#new","content":"Static &lt;/&gt; Event.new() → Event-- The Event object Constructs a new Event object  "},{"title":"destroy​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#destroy","content":"&lt;/&gt; Event.destroy(self: Event) → () Deconstructs the Event object and disconnects/destroys all connections  "},{"title":"connect​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#connect","content":"&lt;/&gt; Event.connect( self: Event, callback: (...any) → ()-- The callback to connect to the event ) → EventConnection-- An event connection that can be disconnected Connects a callback to the event which is invoked when the event is fired local event = Event.new() event:connect(function(...) print(&quot;The event fired and passed the values:&quot;, ...) end) event:fire(1, 2, 3)   "},{"title":"disconnect​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#disconnect","content":"&lt;/&gt; Event.disconnect( self: Event, eventConnection: EventConnection-- The connection to disconnect from the event ) → () Disconnects a callback from the event caution This is called automatically when an EventConnection is disconnected. It's not necessary to call this manually  "},{"title":"fire​","type":1,"pageTitle":"Event","url":"/roblox-utility/api/Event#fire","content":"&lt;/&gt; Event.fire( self: Event, ...: any-- The values to pass to the event's callbacks ) → () Fires the event with the given arguments event:fire(&quot;Hello, world!&quot;)  "},{"title":"NetworkValue","type":0,"sectionRef":"#","url":"/roblox-utility/api/NetworkValue","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#types","content":" "},{"title":"EventConnection​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#EventConnection","content":"&lt;/&gt; interface EventConnection { connected: boolean disconnect: () → () } An interface that respresents a connection to an event. An object which conforms to this interface is returned by the NetworkValue:connect method. This EventConnection object can be used to disconnect the callback from the event print(connection.connected) -- true connection:disconnect() print(connection.connected) -- false   "},{"title":"Self​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#Self","content":"&lt;/&gt; type Self = NetworkValue  "},{"title":"Properties​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#properties","content":" "},{"title":"className​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#className","content":"Static &lt;/&gt; NetworkValue.className: string Static property that defines the class name NetworkValue  "},{"title":"remoteEventDestroyed​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#remoteEventDestroyed","content":"&lt;/&gt; NetworkValue.remoteEventDestroyed: Event An event that fires when the underlying Roblox RemoteEvent instance is destroyed "},{"title":"Functions​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#new","content":"Static &lt;/&gt; NetworkValue.new( name: string,-- The name of the NetworkValue instance which must match on the client and server parent: Instance,-- The parent of the NetworkValue instance value: any?,-- An optional initial value of the NetworkValue instance player: Player? -- An optional player to set the value for ) → NetworkValue-- The NetworkValue object Constructs a new NetworkValue object. The value and player parameters are ignored on the client. If a value is given for a specific player, the same value will be set to nil for all other players  "},{"title":"destroy​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#destroy","content":"&lt;/&gt; NetworkValue.destroy(self: NetworkValue) → () Deconstructs the NetworkValue object  "},{"title":"connect​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#connect","content":"&lt;/&gt; NetworkValue.connect( self: NetworkValue, callback: ( value: any?, player: Player? ) → ()-- The callback to be invoked when the NetworkValue object's value changes ) → EventConnection-- An event connection that can be disconnected Connects a callback that's invoked when the NetworkValue object's value changes. If the NetworkValue object is on the server and a player is specified, then that value has been set specifically for that player, otherwise, the shared value was set local healthValue = NetworkValue.new(&quot;PlayerHealth&quot;, ReplicatedStorage, 100) local connection = healthValue:connect(function(value, player) print(&quot;The players health changed to:&quot;, value) end)   "},{"title":"getValue​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#getValue","content":"&lt;/&gt; NetworkValue.getValue( self: NetworkValue, player: Player? -- An optional player to get the value for ) → any?-- The value of the NetworkValue object Returns the value of the NetworkValue object. If called on the server and a player is specified the value for that specific player is returned note The player parameter is ignored on the client and the value returned is always the value of the NetworkValue object on the server, wether that is the shared value or the value set specifically for the local player -- Server serverValue:setValue(80) serverValue:setValue(50, player1) serverValue:getValue() -- 80 serverValue:getValue(player1) -- 50 -- Player1 Client clientValue:getValue() -- 50 -- Other Client(s) clientValue:getValue() -- 80   "},{"title":"setValue​","type":1,"pageTitle":"NetworkValue","url":"/roblox-utility/api/NetworkValue#setValue","content":"This item only works when running on the server. Server &lt;/&gt; NetworkValue.setValue( self: NetworkValue, value: any?,-- The value to set player: Player? -- An optional player to set the value for ) → () Sets the value of the NetworkValue object. If a player is specified, the value for that specific player is set, otherwise, a shared value is set for all clients note Setting a players value to nil will remove the value for that player and they will receive the shared value local healthValue = NetworkValue.new(&quot;PlayerHealth&quot;, workspace, 100) healthValue:setValue(80) healthValue:setValue(50, player1)  "},{"title":"Value","type":0,"sectionRef":"#","url":"/roblox-utility/api/Value","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#types","content":" "},{"title":"EventConnection​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#EventConnection","content":"&lt;/&gt; interface EventConnection { connected: boolean disconnect: () → () } An interface that respresents a connection to a Value. An object which conforms to this interface is returned by the Value:observe method. This EventConnection object can be used to disconnect the callback from the Value print(connection.connected) -- true connection:disconnect() print(connection.connected) -- false   "},{"title":"Self​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#Self","content":"&lt;/&gt; type Self = Value  "},{"title":"Properties​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#properties","content":" "},{"title":"className​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#className","content":"Static &lt;/&gt; Value.className: string Static property that defines the class name of the Value object "},{"title":"Functions​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#new","content":"Static &lt;/&gt; Value.new(value: T?) → Value-- The Value object Constructs a new Value object  "},{"title":"destroy​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#destroy","content":"&lt;/&gt; Value.destroy(self: Value&lt;T?&gt;) → () Deconstructs the Value object  "},{"title":"observe​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#observe","content":"&lt;/&gt; Value.observe( self: Value&lt;T?&gt;, callback: (T?) → ()-- The callback to be invoked when the value is changed ) → EventConnection-- An event connection that can be disconnected Connects a callback to the Value which is invoked once upon connection and then whenever the value is changed local value = Value.new(1) value:observe(function(value: number?) print(&quot;The value is: &quot;, value) end)   "},{"title":"set​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#set","content":"&lt;/&gt; Value.set( self: Value&lt;T?&gt;, value: T?-- The new value ) → () Sets the new value and updates any observers local value = Value.new(1) value:set(2)   "},{"title":"get​","type":1,"pageTitle":"Value","url":"/roblox-utility/api/Value#get","content":"&lt;/&gt; Value.get(self: Value&lt;T?&gt;) → T?-- The current value Returns the current value local value = Value.new(1) print(value:get()) -- 1  "},{"title":"NetworkEvent","type":0,"sectionRef":"#","url":"/roblox-utility/api/NetworkEvent","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#types","content":" "},{"title":"Self​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#Self","content":"&lt;/&gt; type Self = NetworkEvent   "},{"title":"EventConnection​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#EventConnection","content":"&lt;/&gt; interface EventConnection { connected: boolean disconnect: () → () } An interface that respresents a connection to an event. An object which conforms to this interface is returned by the NetworkEvent:connect method, this EventConnection object can be used to disconnect the callback from the event print(connection.connected) -- true connection:disconnect() print(connection.connected) -- false  "},{"title":"Properties​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#properties","content":" "},{"title":"className​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#className","content":"Static &lt;/&gt; NetworkEvent.className: string Static property that defines the class name NetworkEvent  "},{"title":"remoteEventDestroyed​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#remoteEventDestroyed","content":"&lt;/&gt; NetworkEvent.remoteEventDestroyed: Event An event that fires when the underlying Roblox RemoteEvent instance is destroyed "},{"title":"Functions​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#functions","content":" "},{"title":"new​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#new","content":"Static &lt;/&gt; NetworkEvent.new( name: string,-- The name of the NetworkEvent instance which must match on the client and server parent: Instance,-- The parent of the NetworkEvent instance which must match on the client and server unreliable: boolean?-- Whether or not the event should be unreliable. Defaults to false ) → NetworkEvent-- The NetworkEvent object Constructs a new NetworkEvent object. The 'unreliable' parameter is defined by the server and ignored by the client  "},{"title":"destroy​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#destroy","content":"&lt;/&gt; NetworkEvent.destroy(self: NetworkEvent) → () Deconstructs the NetworkEvent object  "},{"title":"connect​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#connect","content":"&lt;/&gt; NetworkEvent.connect( self: NetworkEvent, callback: (...any) → ()-- The callback to be invoked when the event is fired ) → EventConnection-- An event connection that can be disconnected Connects a callback to the NetworkEvent which is invoked when the event is fired note When connecting on the server, the first argument passed to the callback is always the player that fired the event -- Client clientEvent:connect(function(...) print(&quot;The event fired and passed the values:&quot;, ...) end) -- Server serverEvent:connect(function(player, ...) print(&quot;The event was fired by &quot; .. player .. &quot; and passed the values:&quot;, ...) end)   "},{"title":"fireServer​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#fireServer","content":"This item only works when running on the client. Client &lt;/&gt; NetworkEvent.fireServer( self: NetworkEvent, ...: any-- The arguments to pass to the server ) → () Fires the NetworkEvent on the client, passing the given arguments to the server event:fireServer(&quot;Hello, server!&quot;)   "},{"title":"fireClient​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#fireClient","content":"This item only works when running on the server. Server &lt;/&gt; NetworkEvent.fireClient( self: NetworkEvent, player: Player ,-- The player to fire the event to ...: any-- The arguments to pass to the client ) → () Fires the NetworkEvent on the server, passing the given arguments to the players client event:fireClient(player, &quot;Hello, client!&quot;)   "},{"title":"fireFilteredClients​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#fireFilteredClients","content":"This item only works when running on the server. Server &lt;/&gt; NetworkEvent.fireFilteredClients( self: NetworkEvent, predicate: (player: Player ) → boolean,-- The predicate to check against each player ...: any-- The arguments to pass to the client ) → () Fires the NetworkEvent on the server, passing the given arguments to player clients that pass the given predicate check event:fireFilteredClients(function(player) return player.Team == game.Teams.Heroes end, &quot;You win!&quot;)   "},{"title":"fireAllClients​","type":1,"pageTitle":"NetworkEvent","url":"/roblox-utility/api/NetworkEvent#fireAllClients","content":"This item only works when running on the server. Server &lt;/&gt; NetworkEvent.fireAllClients( self: NetworkEvent, ...: any-- The arguments to pass to the clients ) → () Fires the NetworkEvent on the server, passing the given arguments to all clients event:fireAllClients(1, 2, 3)  "},{"title":"Zone","type":0,"sectionRef":"#","url":"/roblox-utility/api/Zone","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#types","content":" "},{"title":"Self​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#Self","content":"&lt;/&gt; type Self = Zone   "},{"title":"Event​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#Event","content":"&lt;/&gt; interface Event { connect: ( self: Event, callback: (...any) → () ) → EventConnection } An interface that respresents an event that can be connected to  "},{"title":"EventConnection​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#EventConnection","content":"&lt;/&gt; interface EventConnection { connected: boolean disconnect: (self: EventConnection) → () } An interface that respresents a connection to an event. This EventConnection object can be used to disconnect a callback print(connection.connected) -- true connection:disconnect() print(connection.connected) -- false  "},{"title":"Properties​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#properties","content":" "},{"title":"className​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#className","content":"Static &lt;/&gt; Zone.className: string Static property that defines the class name Zone  "},{"title":"playerAdded​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#playerAdded","content":"&lt;/&gt; Zone.playerAdded: Event An event that fires when a player enters the zone  "},{"title":"playerRemoved​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#playerRemoved","content":"&lt;/&gt; Zone.playerRemoved: Event An event that fires when a player leaves the zone  "},{"title":"updateInterval​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#updateInterval","content":"&lt;/&gt; Zone.updateInterval: number The interval in seconds between each update of the list of detected players. The default value is 1 second  "},{"title":"detected​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#detected","content":"&lt;/&gt; Zone.detected: Event An event that fires each interval when players are detected in the zone. This event doesn't fire if no players are detected "},{"title":"Functions​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#new","content":"Static &lt;/&gt; Zone.new( part: Part ,-- The Part instance that defines the zones physical boundaries updateInterval: number?,-- An optional interval in seconds between each check for players. Defaults to 1 overlapParams: OverlapParams?-- An optional OverlapParams instance that defines the parameters for underlying checks ) → Zone-- The Zone object Constructs a new Zone object  "},{"title":"destroy​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#destroy","content":"&lt;/&gt; Zone.destroy(self: Zone) → () Deconstructs the Zone object  "},{"title":"enable​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#enable","content":"&lt;/&gt; Zone.enable(self: Zone) → () Enables the Zone object. Any players that enter or leave the zone after it has been enabled will trigger the playerAdded and playerRemoved events respectively  "},{"title":"disable​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#disable","content":"&lt;/&gt; Zone.disable(self: Zone) → () Disables the Zone object. Players will no longer be detected and the current list of detected players will be cleared  "},{"title":"getDetectedPlayers​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#getDetectedPlayers","content":"&lt;/&gt; Zone.getDetectedPlayers(self: Zone) → {Player }-- An array of players that are currently detected in the zone Returns an array of players that are currently in the zone  "},{"title":"getDetectedHumanoidRootParts​","type":1,"pageTitle":"Zone","url":"/roblox-utility/api/Zone#getDetectedHumanoidRootParts","content":"&lt;/&gt; Zone.getDetectedHumanoidRootParts(self: Zone) → {[Player ]: BasePart }-- A dictionary of players and their corresponding HumanoidRootPart instances Returns a dictionary of players and their corresponding HumanoidRootPart instances that are currently detected in the zone "}]