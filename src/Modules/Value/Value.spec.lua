return function()
    local Value = require(script.Parent)

    describe("value", function()
		it("should create a new value", function()
			local value = Value.new(1)
			expect(value).to.be.ok()
			expect(value.className).to.equal("Value")
			expect(value:get()).to.equal(1)
		end)
		it("should create a new value with no initial value", function()
			local value = Value.new()
			expect(value).to.be.ok()
			expect(value.className).to.equal("Value")
			expect(value:get()).never.to.be.ok()
		end)
		it("should set the value", function()
			local value = Value.new(1)
			value:set(2)
			expect(value:get()).to.equal(2)
		end)
		it("should observe the value", function()
			local value = Value.new(1)
			local fired
			value:observe(function(newValue)
				fired = newValue
			end)
			value:set(2)
			task.defer(function()
				expect(fired).to.equal(2)
			end)
		end)
		it("should observe the value with no initial value", function()
			local value = Value.new()
			local fired
			value:observe(function(newValue)
				fired = newValue
			end)
			value:set(2)
			task.defer(function()
				expect(fired).to.equal(2)
			end)
		end)
		it("should disconnect the observer", function()
			local value = Value.new()
			local connection = value:observe(function()
				value:set(2)
			end)
			value:set(1)
			connection:disconnect()
			expect(value:get()).to.equal(1)
		end)
		it("should destroy the value", function()
			local value = Value.new(1)
			value:destroy()
			expect(value._event).never.to.be.ok()
			expect(value._value).never.to.be.ok()
		end)
		it("should set the value to nil", function()
			local value = Value.new(1)
			value:set(nil)
			expect(value:get()).never.to.be.ok()
		end)
		it("should set the value to a table", function()
			local value = Value.new(1)
			local table = { a = 1, b = 2 }
			value:set(table)
			expect(value:get()).to.equal(table)
		end)
    end)
end